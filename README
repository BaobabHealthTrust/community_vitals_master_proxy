== Welcome to CVR

The Community Vitals Registration (CVR) project was developed by Baobab Health Trust
with funding from The Union to be used as an electronic register at village,
group village and traditional authority levels. Each level has a corresponding mode
setting in the application to cater for the different roles that the users at each level
can perform.

People will be registered at the village headman level and the data from the village headman
will be posted to the group village headman then to the traditional authority and eventually to
the DDE Master server.


===== IMPORTANT TO KNOW ======

 1. CVR proxy servers get National ID's from DDE Master Server. The CVR proxy at the TA level gets the ID's from DDE master
    and distributes them to proxies at village headmen and group village headmen level. The CVR proxies at village and group village
    headman level should point to the CVR proxy at the traditional authority.

 2. All CVR proxies at Traditional Authority level should be treated as sites at DDE master. They will therefore have a Site ID and
    an associated user name. The Site ID will be utilised for all proxies under that TA.

 3. As with DDE Master, all sites under a particular TA should have user profiles created at the CVR proxy for their responsible TA.



===== Getting Started For Android Device ==========

1. From the cloned copy of CVR on your machine, copy the Home.apk file in the root of the folder to your android device.

2. On your android device navigate to the file you copied and double-click it to install.

3. After the initial login setup the application connection details by going under the setup tab and selecting the setup action.


===== Getting Started For Rails Application =======

1. Clone the application from github with the command git clone git@github.com:BaobabHealthTrust/community_vitals_master_proxy.git
   or git clone https://github.com/BaobabHealthTrust/community_vitals_master_proxy.git

2. Set up database settings in the database.yml file which you can base off the database.yml.example template

3. Set up application settings in the application.yml file which you can base off the database.yml.example template. Of great importance
   are the dde_mode, dde_ta, dde_gvh/dde_vh [based on the level of operation].

4. Set up the required gems. The gems are packaged together with the application and can be setup with the command: bundle install --local

5. Create the database and initialise data with the command: rake db:create db:migrate db:seed

6. Your application should now be ready for use. The only outstanding issue will be national identifiers. These can be got by running
    the request_npids script with the command script/runner script/request_npids.

Clone Jobs For Desktop

    - During the setup it will be good to set up clone jobs to carry out the data syncs in the background rather than waiting for
      users to run the scripts. The following scripts should be run at regular intervals :
      1. post_demographics
      2. request_npids
      3. sync_demographics

    - For the application operating at the Tradtional authority level, also setup a clone job to run the get_demographics.rb scripts at
      distant intervals.

